{"version":3,"sources":["components/Loader/Loader.jsx","components/Player/Player.service.js","components/Player/Player.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","props","className","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","id","fillRule","clipRule","strokeLinecap","strokeLinejoin","PlayerService","links","cities","speed","opts","playerVars","autoplay","fs","disableKeyboard","controls","showinfo","modestbranding","rel","mute","playsinline","setSelectedCity","setOverlayVisible","selectedCity","this","console","log","setTimeout","nextCityIndex","findIndex","city","length","event","target","value","Player","ps","useState","isNoiseMuted","setIsNoiseMuted","isOverlayVisible","setData","style","containerClassName","videoId","onPlay","onEnd","onPlaybackRateChange","display","src","autoPlay","muted","position","top","right","name","onChange","cityChanged","map","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92de26ab.chunk.js","sourcesContent":["import \"./Loader.css\"\r\n\r\nconst Loader = props => (\r\n    <div className=\"loader--container\" {...props}>\r\n        <svg className=\"tea\" width=\"37\" height=\"48\" viewBox=\"0 0 37 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M27.0819 17H3.02508C1.91076 17 1.01376 17.9059 1.0485 19.0197C1.15761 22.5177 1.49703 29.7374 2.5 34C4.07125 40.6778 7.18553 44.8868 8.44856 46.3845C8.79051 46.79 9.29799 47 9.82843 47H20.0218C20.639 47 21.2193 46.7159 21.5659 46.2052C22.6765 44.5687 25.2312 40.4282 27.5 34C28.9757 29.8188 29.084 22.4043 29.0441 18.9156C29.0319 17.8436 28.1539 17 27.0819 17Z\" stroke=\"var(--secondary)\" strokeWidth=\"2\"></path>\r\n            <path d=\"M29 23.5C29 23.5 34.5 20.5 35.5 25.4999C36.0986 28.4926 34.2033 31.5383 32 32.8713C29.4555 34.4108 28 34 28 34\" stroke=\"var(--secondary)\" strokeWidth=\"2\"></path>\r\n            <path id=\"teabag\" fill=\"var(--secondary)\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M16 25V17H14V25H12C10.3431 25 9 26.3431 9 28V34C9 35.6569 10.3431 37 12 37H18C19.6569 37 21 35.6569 21 34V28C21 26.3431 19.6569 25 18 25H16ZM11 28C11 27.4477 11.4477 27 12 27H18C18.5523 27 19 27.4477 19 28V34C19 34.5523 18.5523 35 18 35H12C11.4477 35 11 34.5523 11 34V28Z\"></path>\r\n            <path id=\"steamL\" d=\"M17 1C17 1 17 4.5 14 6.5C11 8.5 11 12 11 12\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" stroke=\"var(--secondary)\"></path>\r\n            <path id=\"steamR\" d=\"M21 6C21 6 21 8.22727 19 9.5C17 10.7727 17 13 17 13\" stroke=\"var(--secondary)\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></path>\r\n        </svg>\r\n    </div>\r\n)\r\n\r\nexport default Loader;\r\n","export default class PlayerService {\r\n    links = {\r\n        \"Barcelona\": \"hbYweUDbtxc\",\r\n        \"Lisbon\": \"59aKTAVsfP8\",\r\n        \"Prague\": \"hGQqjJEnyJU\",\r\n        \"Seoul\": \"G_H800ffKb0\",\r\n        \"Singapore\": \"IpEpTWIDL4Q\",\r\n        \"Hong Kong\": \"V8nBZbbJePs\",\r\n        \"Tochigi, Tokyo\": \"G_H800ffKb0\",\r\n        \"Taipei\": \"KvNLWsBQYPE\",\r\n        \"Bangkok\": \"kOKAlvVBVoI\",\r\n        \"Andalusia\": \"svR_pijHljw\",\r\n        \"Croatia\": \"Ejq9iwZRR7Q\"\r\n    };\r\n    cities = [\"Barcelona\", \"Lisbon\", \"Prague\", \"Seoul\", \"Singapore\", \"Hong Kong\",\r\n  \"Tochigi, Tokyo\", \"Taipei\", \"Bangkok\", \"Andalusia\",\"Croatia\"\r\n];\r\n    speed = 1;\r\n    opts = {\r\n        height: '100%',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1,\r\n            fs: 0,\r\n            disableKeyboard: 1,\r\n            controls: 1,\r\n            showinfo: 0,\r\n            modestbranding: 0,\r\n            rel: 0,\r\n            mute: 1,\r\n            playsinline: 1,\r\n        },\r\n    };\r\n\r\n    selectedCity;\r\n    // setSelectedCity;\r\n    // setOverlayVisible;\r\n\r\n    setData(setSelectedCity, setOverlayVisible, selectedCity) {\r\n        this.setSelectedCity = setSelectedCity;\r\n        this.selectedCity = selectedCity;\r\n        this.setOverlayVisible = setOverlayVisible;\r\n    }\r\n\r\n    onPlay() {\r\n        console.log(this);\r\n        setTimeout(() => {\r\n            this.setOverlayVisible(false);\r\n        }, 3100)\r\n    }\r\n\r\n    onEnd() {\r\n        let nextCityIndex = this.cities.findIndex(city => city === this.selectedCity) + 1\r\n        if (nextCityIndex > this.cities.length) {\r\n            nextCityIndex = 0;\r\n        }\r\n        this.setSelectedCity(this.cities[nextCityIndex])\r\n        this.setOverlayVisible(true);\r\n    }\r\n\r\n    cityChanged(event) {\r\n        this.setOverlayVisible(true);\r\n        this.setSelectedCity(event.target.value);\r\n    }\r\n\r\n}\r\n","import { useState } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\nimport Loader from '../Loader/Loader';\r\nimport PlayerService from './Player.service';\r\nimport './Player.css';\r\n\r\nconst Player = () => {\r\n    const ps = new PlayerService();\r\n    const [selectedCity, setSelectedCity] = useState(ps.cities[1]);\r\n    const [isNoiseMuted, setIsNoiseMuted] = useState(false);\r\n    const [isOverlayVisible, setOverlayVisible] = useState(true)\r\n\r\n    ps.setData(setSelectedCity, setOverlayVisible, selectedCity)\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                width: 640,\r\n                height: 360,\r\n            }}>\r\n                <YouTube\r\n                    height=\"360\"\r\n                    width=\"640\"\r\n                    containerClassName=\"youtube-wrap\"\r\n                    id=\"yt-player\"\r\n                    videoId={ps.links[selectedCity]}\r\n                    opts={ps.opts}\r\n                    onPlay={() => ps.onPlay()}\r\n                    onEnd={() => ps.onEnd()}\r\n                    onPlaybackRateChange={() => { }}\r\n                />\r\n            </div>\r\n            <ReactAudioPlayer\r\n                style={{ display: 'none' }}\r\n                src=\"https://github.com/Banila48/Feels-on-Wheels/raw/master/src/components/Player/%E9%9D%9E%E8%AF%9A%E5%8B%BF%E6%89%B0%20vibes.ogg\"\r\n                autoPlay\r\n                controls\r\n                muted={isNoiseMuted}\r\n            />\r\n            <select\r\n                style={{ position: \"absolute\", top: 20, right: 50}}\r\n                value={selectedCity}\r\n                name=\"city\"\r\n                onChange={(event) => ps.cityChanged(event)}\r\n            >\r\n                {ps.cities.map((city) => (\r\n                    <option key={city} value={city}>{city}</option>\r\n                ))}\r\n            </select>\r\n            <button\r\n                style={{ position: \"absolute\", top: 50, right: 50 }}\r\n                onClick={() => setIsNoiseMuted(!isNoiseMuted)}\r\n            >\r\n                Mute Songs\r\n            </button>\r\n            {isOverlayVisible && (<Loader />)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Player;\r\n","import \"./App.css\";\r\nimport Player from \"./components/Player/Player\"\r\n\r\nconst App = () => {\r\n  return <div className=\"App\"><Player /></div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}